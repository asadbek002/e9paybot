from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)
import pandas as pd
import re
import os
import asyncio
from datetime import datetime
import shutil

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "7365174406:AAGBwSuWFIUDSXoFCbw1r5gpmdrBU7txXis"
GROUP_ID = -4535050669
ADMIN_ID = 5897615611
user_sessions = {}

TEXTS = {
    "start": {
        "uz": "üëã Iltimos, E9pay tizimida ro'yxatdan o'tgan telefon raqamingizni kiriting.",
        "ru": "üëã –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤ —Å–∏—Å—Ç–µ–º–µ E9pay.",
        "en": "üëã Please enter the phone number registered in the E9pay system."
    },
    "passport_request": {
        "uz": "üõ¨ Iltimos, xorijiy pasportingiz suratini yuboring.",
        "ru": "üõ¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ –∑–∞–≥—Ä–∞–Ω–∏—á–Ω–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞.",
        "en": "üõ¨ Please send a photo of your international passport."
    },
    "ask_id_card": {
        "uz": "üÜî Agar sizda koreyscha ID karta bo‚Äòlsa ‚Äî uni ham yuboring. Aks holda, quyidagi tugmani bosing.",
        "ru": "üÜî –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–æ—Ä–µ–π—Å–∫–∞—è ID-–∫–∞—Ä—Ç–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        "en": "üÜî If you have a Korean ID card ‚Äî send it. Otherwise, press the button below."
    },
    "start_button": {
        "uz": "üü¢ Boshlash",
        "ru": "üü¢ –°—Ç–∞—Ä—Ç",
        "en": "üü¢ Start"
    }
}

PHONE_REGEX = re.compile(r"^010\d{8}$")


def log_action(text):
    with open("logs.txt", "a", encoding="utf-8") as f:
        f.write(text + "\n")


def save_to_csv(session, user):
    row = {
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "name": user.full_name,
        "phone": session["phone"],
        "user_id": user.id
    }
    df = pd.DataFrame([row])
    df.to_csv("data.csv", mode="a", header=not os.path.exists(
        "data.csv"), index=False)

# –°—Ç–∞—Ä—Ç


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    telegram_lang = update.effective_user.language_code or "uz"
    lang = "uz"
    if telegram_lang.startswith("ru"):
        lang = "ru"
    elif telegram_lang.startswith("en"):
        lang = "en"

    user_sessions[user_id] = {"lang": lang}
    label = TEXTS["start_button"][lang]

    await update.message.reply_text(
        {
            "uz": f"{label} uchun tugmani bosing:",
            "ru": f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É {label}:",
            "en": f"Press the {label} button:"
        }[lang],
        reply_markup=ReplyKeyboardMarkup(
            [[label]],  # –ö–Ω–æ–ø–∫–∞ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type in ["group", "supergroup"]:
        return
    user_id = update.message.from_user.id
    text = update.message.text.strip()
    session = user_sessions.get(user_id)
    if not session:
        session = {"lang": "uz"}
        user_sessions[user_id] = session
    lang = session.get("lang", "uz")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç
    if text == TEXTS["start_button"][lang]:
        await update.message.reply_text(TEXTS["start"][lang])
        return

    if "start" in text.lower():  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        await update.message.reply_text(TEXTS["start"][lang])
        return

    if not PHONE_REGEX.match(text):
        await update.message.reply_text({
            "uz": "‚ùå Telefon raqami noto'g'ri. Format: 010XXXXXXXX",
            "ru": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü—Ä–∏–º–µ—Ä: 010XXXXXXXX",
            "en": "‚ùå Invalid phone number format. Use: 010XXXXXXXX"
        }[lang])
        return

    session["phone"] = text
    await update.message.reply_text(TEXTS["passport_request"][lang], reply_markup=ReplyKeyboardRemove())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # 1. –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –∏–∑ –≥—Ä—É–ø–ø—ã
    if update.message.chat.type in ["group", "supergroup"]:
        return

    user_id = update.message.from_user.id
    photo = update.message.photo[-1]
    session = user_sessions.get(user_id)
    lang = session.get("lang", "uz") if session else "uz"

    if not session or "phone" not in session:
        await update.message.reply_text(TEXTS["start"][lang])
        return

    # 2. –ü—Ä–∏–Ω—è—Ç–æ —Ñ–æ—Ç–æ ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    await update.message.reply_text({
        "uz": "‚è≥ Rasm qabul qilinmoqda...",
        "ru": "‚è≥ –§–æ—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...",
        "en": "‚è≥ Processing your image..."
    }[lang])

    # 3. –ß–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –º–µ–¥–ª–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
    await asyncio.sleep(5)
    await update.message.reply_text({
        "uz": "‚ö†Ô∏è Internetingiz sekin bo‚Äòlishi mumkin. Kuting yoki qayta yuboring.",
        "ru": "‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ, —É –≤–∞—Å –º–µ–¥–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ.",
        "en": "‚ö†Ô∏è Your internet might be slow. Please wait or resend the photo."
    }[lang])

    # 4. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ (—ç–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏)
    await asyncio.sleep(2)

    # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ —Å–µ—Å—Å–∏—é
    if "passport_photo" not in session:
        session["passport_photo"] = photo.file_id
        await update.message.reply_text(TEXTS["ask_id_card"][lang],
                                        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚ñ∂Ô∏è Davom etish / –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å / Continue", callback_data="submit")]]))
    elif "id_card_photo" not in session:
        session["id_card_photo"] = photo.file_id
        await update.message.reply_text({
            "uz": "‚úÖ ID karta qabul qilindi.",
            "ru": "‚úÖ ID-–∫–∞—Ä—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞.",
            "en": "‚úÖ ID card received."
        }[lang], reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚ñ∂Ô∏è Davom etish / –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å / Continue", callback_data="submit")]]))

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–¥–∞—á–∏


async def handle_submit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    session = user_sessions.get(user_id)
    lang = session.get("lang", "uz") if session else "uz"

    if not session or "passport_photo" not in session:
        await query.edit_message_text("‚ùó Please upload your passport first.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = query.from_user
    full_name = user.full_name
    username = f"@{user.username}" if user.username else "‚Äî"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã
    caption = (
        f"üìû Telefon: {session['phone']}\n"
        f"üë§ Foydalanuvchi: {full_name}\n"
        f"üîó Username: {username}\n"
        f"üÜî ID: {user.id}"
    )

    await context.bot.send_message(chat_id=GROUP_ID, text=caption)
    await context.bot.send_photo(chat_id=GROUP_ID, photo=session["passport_photo"])
    if "id_card_photo" in session:
        await context.bot.send_photo(chat_id=GROUP_ID, photo=session["id_card_photo"])

    await query.edit_message_text({
        "uz": "‚úÖ Ma'lumotlar yuborildi. Rahmat!",
        "ru": "‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –°–ø–∞—Å–∏–±–æ!",
        "en": "‚úÖ Your data has been submitted. Thank you!"
    }[lang])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–≥ –∏ CSV
    log_action(f"{full_name} | {session['phone']} | {user.id} | {username}")
    save_to_csv(session, user)

    # –°–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏
    user_sessions[user_id] = {"lang": lang}
    label = TEXTS["start_button"][lang]
    await context.bot.send_message(
        chat_id=user_id,
        text={
            "uz": "üü¢ Yangi ariza topshirish uchun tugmani bosing:",
            "ru": "üü¢ –ß—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:",
            "en": "üü¢ To submit a new request, press the button:"
        }[lang],
        reply_markup=ReplyKeyboardMarkup(
            [[f"{label} / Start / –°—Ç–∞—Ä—Ç"]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )


async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå Sizda ruxsat yo'q.")
        return
    buttons = [
        [InlineKeyboardButton("üìÇ Logni ko‚Äòrish", callback_data="view_log")],
        [InlineKeyboardButton("üßπ Logni tozalash", callback_data="clear_log")],
        [InlineKeyboardButton(
            "üìã Arizalar soni", callback_data="count_entries")]
    ]
    await update.message.reply_text("üîß Admin panel:", reply_markup=InlineKeyboardMarkup(buttons))


async def handle_admin_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.from_user.id != ADMIN_ID:
        await query.message.reply_text("‚ùå Sizda ruxsat yo'q.")
        return

    if query.data == "view_log":
        try:
            with open("logs.txt", "r", encoding="utf-8") as f:
                content = f.read()
                await query.message.reply_text(f"üìÇ Log mazmuni:\n{content[-4000:]}")
        except:
            await query.message.reply_text("‚ùå Logni o'qib bo'lmadi.")
    elif query.data == "clear_log":
        open("logs.txt", "w").close()
        await query.message.reply_text("üßπ Log tozalandi.")
    elif query.data == "count_entries":
        try:
            with open("logs.txt", "r", encoding="utf-8") as f:
                lines = f.readlines()
                await query.message.reply_text(f"üìã Jami arizalar: {len(lines)} ta")
        except:
            await query.message.reply_text("‚ùå Hisoblab bo‚Äòlmadi.")

# –ö–æ–º–∞–Ω–¥—ã: /filter_logs, /find, /archive_logs, /msg


async def filter_logs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    if not context.args:
        return await update.message.reply_text("‚ùó –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD")
    keyword = context.args[0]
    try:
        with open("logs.txt", "r", encoding="utf-8") as f:
            filtered = [line for line in f if keyword in line]
        if not filtered:
            return await update.message.reply_text("‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await update.message.reply_text("üìÑ –ù–∞–π–¥–µ–Ω–æ:\n" + "".join(filtered[-30:]))
    except:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤.")


async def find_by_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    if not context.args:
        return await update.message.reply_text("‚ùó –£–∫–∞–∂–∏—Ç–µ –∏–º—è –¥–ª—è –ø–æ–∏—Å–∫–∞.")
    name = " ".join(context.args)
    try:
        with open("logs.txt", "r", encoding="utf-8") as f:
            filtered = [line for line in f if name.lower() in line.lower()]
        if not filtered:
            return await update.message.reply_text("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await update.message.reply_text("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n" + "".join(filtered[-30:]))
    except:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.")


async def archive_logs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    try:
        today = datetime.now().strftime("%Y-%m-%d")
        shutil.copy("logs.txt", f"logs_{today}.txt")
        open("logs.txt", "w").close()
        await update.message.reply_text(f"‚úÖ –ê—Ä—Ö–∏–≤ logs_{today}.txt —Å–æ–∑–¥–∞–Ω –∏ log –æ—á–∏—â–µ–Ω.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def msg_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    if len(context.args) < 2:
        return await update.message.reply_text("‚ùó –§–æ—Ä–º–∞—Ç: /msg user_id —Ç–µ–∫—Å—Ç")
    try:
        user_id = int(context.args[0])
        text = " ".join(context.args[1:])
        await context.bot.send_message(chat_id=user_id, text=f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{text}")
        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

# === RUN BOT ===
app = ApplicationBuilder().token(BOT_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("admin", admin))
app.add_handler(CommandHandler("filter_logs", filter_logs))
app.add_handler(CommandHandler("find", find_by_name))
app.add_handler(CommandHandler("archive_logs", archive_logs))
app.add_handler(CommandHandler("msg", msg_command))
app.add_handler(CallbackQueryHandler(handle_submit, pattern="^submit$"))
app.add_handler(CallbackQueryHandler(handle_admin_buttons,
                pattern="^(view_log|clear_log|count_entries)$"))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

print("ü§ñ Bot ishga tushdi...")
app.run_polling()
